HTTP:

    - Stateless Application Layer protocol

    - Utilizes TCP and clear text

    - Utilize port 80 or 8000 in normal operations


HTTP Methods:

    - HEAD:  
      - required is a safe method that requests a 
      response from the server similar to a Get request except that the message body is not included. It is a great way to acquire more information about the server and its operational status.

    - GET:
      - required Get is the most common method used. It requests information and content from the server. For example, GET http://10.1.1.1/Webserver/index.html requests the index.html page from 
      the server based on our supplied URI.

    - POST:
      - optional Post is a way to submit information to a server based on the fields in the request. For example, submitting a message to a Facebook post or website forum is a POST action. The 
      actual action taken can vary based on the server, and we should pay attention to the response codes sent back to validate the action.

    - PUT:
      - optional Put will take the data appended to the message and place it under the requested URI. If an item does not exist there already, it will create one with the supplied data. If an 
      object already exists, the new PUT will be considered the most up-to-date, and the object will be modified to match. The easiest way to visualize the differences between PUT and POST is to 
      think of it like this; PUT will create or update an object at the URI supplied, while POST will create child entities at the provided URI. The action taken can be compared with the difference 
      between creating a new file vs. writing comments about that file on the same page.

    - DELETE:
      - optional Delete does as the name implies. It will remove the object at the given URI.

    - TRACE:
      - optional Allows for remote server diagnosis. The remote server will echo the same request that was sent in its response if the TRACE method is enabled.

    - OPTIONS:
      - optional The Options method can gather information on the supported HTTP methods the server recognizes. This way, we can determine the requirements for interacting with a specific resource 
      or server without actually requesting data or objects from it.

    - CONNECT:
      - optional Connect is reserved for use with Proxies or other security devices like firewalls. Connect allows for tunneling over HTTP. (SSL tunnels)


HTTPS:

    - Modifies HTTP to utiliez Transport Layer Security or Secure Sockets Layer (SSL) in older applications for data security

    - TLS is utilized as an encryption mechanism to secure the communications between a client and a server

    - TLS can wrap regular HTTP traffic within TLS, which means that we can encrypt out entire conversation, not just the data sent or requested.

    - Utilizes port 443 and 8443 

    - TLS Handshake:
      - Client and server exchange hello messages to agree on connection parameters.
      - Client and server exchange necessary cryptographic parameters to establish a premaster secret.
      - Client and server will exchange x.509 certificates and cryptographic information allowing for authentication within the session.
      - Generate a master secret from the premaster secret and exchanged random values.
      - Client and server issue negotiated security parameters to the record layer portion of the TLS protocol.
      - Client and server verify that their peer has calculated the same security parameters and that the handshake occurred without tampering by an attacker.


FTP:

    - File Tansfer Protocol: Enables quick data transfer between computing devices

    - Can be utilized from the CLI, Web browserm or through graphical FTP client such as FileZilla.

    - Insecure ---> SFTP is the secure version

    - FTP uses port 20 and 21: 20 is used for data transfer, while port 21 is utilized for issuing commands controlling the FTP session. FTP supports user authentication as well as allowing anonymous access

    - Can run in active or passive mode
      - Active is default meaning that the server listens for a control command PORT from the client, stating what port to use for data transfer
      - Passive mode enables us to access FTP servers located behind firewalls or a NAT-enabled link that makes direct TCP connections impossible. Client would send the PASV command and wait for a response from the
      server informing the client what IP and port to utiliez for the data transfer channel connection.


SMB:

    - Server Message Block is seen in Windows Enterprise env that enables sharing resources between hosts over common networking architectures.

    - Connection-oriented protocol that requiers user authentication from the host to the resource to ensure the user has correct permissions to use that resource or perform actions

    - SMB supports direct TCP over 445, NetBIOS over TCP port 139 and even the QUIC protocol





















